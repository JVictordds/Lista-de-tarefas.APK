import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';

void main() {
  runApp(MaterialApp(
    debugShowCheckedModeBanner: false,
    home: MyApp(),
  ));
}

class Task {
  String title;
  bool isCompleted;
  DateTime? dateTime;

  Task({required this.title, this.isCompleted = false, this.dateTime});

  Map<String, dynamic> toJson() {
    return {
      'title': title,
      'isCompleted': isCompleted,
      'dateTime': dateTime?.toIso8601String(),
    };
  }

  factory Task.fromJson(Map<String, dynamic> json) {
    return Task(
      title: json['title'] as String,
      isCompleted: json['isCompleted'] as bool? ?? false,
      dateTime: json['dateTime'] != null
          ? DateTime.parse(json['dateTime'] as String)
          : null,
    );
  }
}

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  List<Task> tasks = [];
  List<Task> completedTasks = [];
  final TextEditingController _controller = TextEditingController();
  DateTime? _selectedDateTime;
  final GlobalKey<AnimatedListState> _pendingListKey = GlobalKey<AnimatedListState>();
  final GlobalKey<AnimatedListState> _completedListKey = GlobalKey<AnimatedListState>();

  @override
  void initState() {
    super.initState();
    _loadTasks();
  }

  @override
  void dispose() {
    super.dispose();
    _controller.dispose();
  }

  void _loadTasks() async {
    final prefs = await SharedPreferences.getInstance();
    String? tasksString = prefs.getString('tasks');

    if (tasksString != null) {
      List<dynamic> decodedList = jsonDecode(tasksString) as List;
      List<Task> loadedTasks = decodedList.map<Task>((task) => Task.fromJson(task as Map<String, dynamic>)).toList();
      setState(() {
        tasks = loadedTasks.where((task) => !task.isCompleted).toList();
        completedTasks = loadedTasks.where((task) => task.isCompleted).toList();
      });
    }
  }

  void _saveTasks() async {
    final prefs = await SharedPreferences.getInstance();
    List<Task> allTasks = [...tasks, ...completedTasks];
    prefs.setString('tasks', jsonEncode(allTasks.map((task) => task.toJson()).toList()));
  }

  void _showAddTaskDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Adicionar nova tarefa'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                controller: _controller,
                decoration: InputDecoration(hintText: 'Título da tarefa'),
                onSubmitted: (value) {
                  if (value.isNotEmpty) {
                    _addTask(value);
                    Navigator.of(context).pop();
                  }
                },
              ),
              SizedBox(height: 10),
              Row(
                children: [
                  Text(_selectedDateTime != null
                      ? 'Data/Hora selecionada: ${_formatDateTime(_selectedDateTime!)}'
                      : 'Nenhuma data/hora selecionada'),
                  IconButton(
                    icon: Icon(Icons.calendar_today),
                    onPressed: () => _selectDateTime(context),
                  ),
                ],
              ),
            ],
          ),
          actions: [
            TextButton(
              child: Text('Cancelar'),
              onPressed: () {
                Navigator.of(context).pop();
                _controller.clear();
                _selectedDateTime = null;
              },
            ),
            ElevatedButton(
              child: Text('Adicionar'),
              onPressed: () {
                if (_controller.text.isNotEmpty) {
                  _addTask(_controller.text);
                  Navigator.of(context).pop();
                }
              },
            ),
          ],
        );
      },
    );
  }

  void _addTask(String taskTitle) {
    final newTask = Task(title: taskTitle, dateTime: _selectedDateTime);
    setState(() {
      tasks.insert(0, newTask);
    });
    if (_pendingListKey.currentState != null) {
      _pendingListKey.currentState!.insertItem(0);
    }
    _controller.clear();
    _selectedDateTime = null;
    _saveTasks();
  }

  void _markTaskAsCompleted(int index) {
    final task = tasks[index];
    setState(() {
      tasks.removeAt(index);
      task.isCompleted = true;
      completedTasks.insert(0, task);
    });
    if (_pendingListKey.currentState != null) {
      _pendingListKey.currentState!.removeItem(index, (context, animation) => _buildTaskItem(task, false, animation));
    }
    if (_completedListKey.currentState != null) {
      _completedListKey.currentState!.insertItem(0);
    }
    _saveTasks();
  }

  void _removePendingTask(int index) {
    final task = tasks[index];
    setState(() {
      tasks.removeAt(index);
    });
    if (_pendingListKey.currentState != null) {
      _pendingListKey.currentState!.removeItem(index, (context, animation) => _buildTaskItem(task, false, animation));
    }
    _saveTasks();
  }

  void _removeCompletedTask(int index) {
    final task = completedTasks[index];
    setState(() {
      completedTasks.removeAt(index);
    });
    if (_completedListKey.currentState != null) {
      _completedListKey.currentState!.removeItem(index, (context, animation) => _buildTaskItem(task, true, animation));
    }
    _saveTasks();
  }

  void _clearAllCompletedTasks() {
    showDialog(
      context: context,
      builder: (ctx) => AlertDialog(
        title: Text('Limpar tarefas concluídas'),
        content: Text('Tem certeza que deseja excluir todas as tarefas concluídas?'),
        actions: [
          TextButton(
            child: Text('Cancelar'),
            onPressed: () => Navigator.of(ctx).pop(),
          ),
          TextButton(
            child: Text('Confirmar'),
            onPressed: () {
              setState(() {
                completedTasks.clear();
              });
              Navigator.of(ctx).pop();
              _saveTasks();
            },
          ),
        ],
      ),
    );
  }

  Future<void> _selectDateTime(BuildContext context) async {
    try {
      final DateTime? pickedDate = await showDatePicker(
        context: context,
        initialDate: DateTime.now(),
        firstDate: DateTime(2020),
        lastDate: DateTime(2100),
      );

      if (pickedDate != null) {
        final TimeOfDay? pickedTime = await showTimePicker(
          context: context,
          initialTime: TimeOfDay.now(),
        );

        if (pickedTime != null) {
          final DateTime combined = DateTime(
            pickedDate.year,
            pickedDate.month,
            pickedDate.day,
            pickedTime.hour,
            pickedTime.minute,
          );

          setState(() {
            _selectedDateTime = combined;
          });
        }
      }
    } catch (e) {
      print('Erro ao selecionar data/hora: $e');
    }
  }

  String _formatDateTime(DateTime dateTime) {
    return '${dateTime.day.toString().padLeft(2, '0')}/'
        '${dateTime.month.toString().padLeft(2, '0')}/'
        '${dateTime.year} '
        '${dateTime.hour.toString().padLeft(2, '0')}:'
        '${dateTime.minute.toString().padLeft(2, '0')}';
  }

  Widget _buildTaskItem(Task task, bool isCompletedList, Animation<double> animation) {
    return FadeTransition(
      opacity: animation,
      child: SlideTransition(
        position: Tween<Offset>(
          begin: Offset(1.0, 0),
          end: Offset.zero,
        ).animate(animation),
        child: Card(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10),
          ),
          elevation: isCompletedList ? 2 : 3,
          margin: EdgeInsets.symmetric(vertical: 6),
          color: isCompletedList ? Colors.grey[200] : null,
          child: ListTile(
            title: Text(
              task.title,
              style: TextStyle(
                decoration: isCompletedList ? TextDecoration.lineThrough : TextDecoration.none,
                color: isCompletedList ? Colors.grey[600] : null,
              ),
            ),
            subtitle: task.dateTime != null
                ? Text('${isCompletedList ? 'Concluída:' : 'Para:'} ${_formatDateTime(task.dateTime!)}')
                : null,
            trailing: isCompletedList
                ? IconButton(
                    icon: Icon(Icons.delete_outline, color: Colors.red),
                    tooltip: 'Excluir tarefa',
                    onPressed: () {
                      final index = completedTasks.indexOf(task);
                      if (index != -1) _removeCompletedTask(index);
                    },
                  )
                : Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      IconButton(
                        icon: Icon(Icons.check_circle, color: Colors.green),
                        tooltip: 'Marcar como concluída',
                        onPressed: () {
                          final index = tasks.indexOf(task);
                          if (index != -1) _markTaskAsCompleted(index);
                        },
                      ),
                      IconButton(
                        icon: Icon(Icons.delete, color: Colors.red),
                        tooltip: 'Excluir',
                        onPressed: () {
                          final index = tasks.indexOf(task);
                          if (index != -1) _removePendingTask(index);
                        },
                      ),
                    ],
                  ),
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: 2,
      child: Scaffold(
        appBar: AppBar(
          title: Text('Lista de Tarefas'),
          actions: [
            IconButton(
              icon: Icon(Icons.delete_sweep),
              tooltip: 'Limpar tarefas concluídas',
              onPressed: _clearAllCompletedTasks,
            ),
          ],
        ),
        floatingActionButton: FloatingActionButton(
          onPressed: () => _showAddTaskDialog(context),
          tooltip: 'Adicionar Tarefa',
          child: Icon(Icons.add),
        ),
        body: Column(
          children: [
            TabBar(
              tabs: [
                Tab(text: 'Pendentes'),
                Tab(text: 'Concluídas'),
              ],
            ),
            Expanded(
              child: TabBarView(
                children: [
                  AnimatedList(
                    key: _pendingListKey,
                    initialItemCount: tasks.length,
                    itemBuilder: (context, index, animation) {
                      return _buildTaskItem(tasks[index], false, animation);
                    },
                  ),
                  AnimatedList(
                    key: _completedListKey,
                    initialItemCount: completedTasks.length,
                    itemBuilder: (context, index, animation) {
                      return _buildTaskItem(completedTasks[index], true, animation);
                    },
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}
