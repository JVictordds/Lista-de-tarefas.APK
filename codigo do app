import 'package:flutter/material.dart';

void main() {
  runApp(MaterialApp(
    debugShowCheckedModeBanner: false,
    home: MyApp(),
  ));
}

class Task {
  String title;
  bool isCompleted;
  DateTime? dateTime;

  Task({required this.title, this.isCompleted = false, this.dateTime});
}

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  List<Task> tasks = [];
  List<Task> completedTasks = [];

  final TextEditingController _controller = TextEditingController();
  DateTime? _selectedDateTime;

  void _addTask(String taskTitle) {
    setState(() {
      tasks.add(Task(title: taskTitle, dateTime: _selectedDateTime));
      _controller.clear();
      _selectedDateTime = null;
    });
  }

  void _markTaskAsCompleted(int index) {
    setState(() {
      tasks[index].isCompleted = true;
      completedTasks.add(tasks[index]);
      tasks.removeAt(index);
    });
  }

  Future<void> _selectDateTime(BuildContext context) async {
    try {
      final DateTime? pickedDate = await showDatePicker(
        context: context,
        initialDate: DateTime.now(),
        firstDate: DateTime(2020),
        lastDate: DateTime(2100),
      );

      if (pickedDate != null) {
        final TimeOfDay? pickedTime = await showTimePicker(
          context: context,
          initialTime: TimeOfDay.now(),
        );

        if (pickedTime != null) {
          final DateTime combined = DateTime(
            pickedDate.year,
            pickedDate.month,
            pickedDate.day,
            pickedTime.hour,
            pickedTime.minute,
          );

          setState(() {
            _selectedDateTime = combined;
          });
        }
      }
    } catch (e) {
      print('Erro ao selecionar data/hora: $e');
    }
  }

  String _formatDateTime(DateTime dateTime) {
    return '${dateTime.day.toString().padLeft(2, '0')}/'
        '${dateTime.month.toString().padLeft(2, '0')}/'
        '${dateTime.year} '
        '${dateTime.hour.toString().padLeft(2, '0')}:' 
        '${dateTime.minute.toString().padLeft(2, '0')}';
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Agenda de Tarefas'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: _controller,
                    decoration: InputDecoration(
                      labelText: 'Nova tarefa',
                      border: OutlineInputBorder(),
                    ),
                  ),
                ),
                SizedBox(width: 8),
                IconButton(
                  icon: Icon(Icons.calendar_today),
                  tooltip: 'Selecionar data e hora',
                  onPressed: () => _selectDateTime(context),
                ),
                IconButton(
                  icon: Icon(Icons.add),
                  tooltip: 'Adicionar tarefa',
                  onPressed: () {
                    if (_controller.text.trim().isNotEmpty) {
                      _addTask(_controller.text.trim());
                    }
                  },
                ),
              ],
            ),
            if (_selectedDateTime != null)
              Padding(
                padding: const EdgeInsets.only(top: 8.0),
                child: Text(
                  'Data selecionada: ${_formatDateTime(_selectedDateTime!)}',
                  style: TextStyle(color: Colors.blueGrey),
                ),
              ),
            SizedBox(height: 20),

            // Lista de tarefas pendentes
            Expanded(
              child: ListView.builder(
                itemCount: tasks.length,
                itemBuilder: (context, index) {
                  final task = tasks[index];
                  return Card(
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(10),
                    ),
                    elevation: 3,
                    margin: EdgeInsets.symmetric(vertical: 6),
                    child: ListTile(
                      title: Text(task.title),
                      subtitle: task.dateTime != null
                          ? Text('Para: ${_formatDateTime(task.dateTime!)}')
                          : null,
                      trailing: Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          IconButton(
                            icon: Icon(Icons.check_circle, color: Colors.green),
                            tooltip: 'Marcar como concluída',
                            onPressed: () => _markTaskAsCompleted(index),
                          ),
                          IconButton(
                            icon: Icon(Icons.delete, color: Colors.red),
                            tooltip: 'Excluir',
                            onPressed: () {
                              setState(() {
                                tasks.removeAt(index);
                              });
                            },
                          ),
                        ],
                      ),
                    ),
                  );
                },
              ),
            ),

            SizedBox(height: 20),
            Text(
              'Tarefas Concluídas',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),

            // Lista de tarefas concluídas
            Expanded(
              child: ListView.builder(
                itemCount: completedTasks.length,
                itemBuilder: (context, index) {
                  final task = completedTasks[index];
                  return Card(
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(10),
                    ),
                    elevation: 2,
                    margin: EdgeInsets.symmetric(vertical: 6),
                    color: Colors.grey[200],
                    child: ListTile(
                      title: Text(
                        task.title,
                        style: TextStyle(
                          decoration: TextDecoration.lineThrough,
                          color: Colors.grey[600],
                        ),
                      ),
                      subtitle: task.dateTime != null
                          ? Text('Concluída: ${_formatDateTime(task.dateTime!)}')
                          : null,
                    ),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}
