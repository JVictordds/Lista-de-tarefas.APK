import 'package:flutter/material.dart';

void main() {
  runApp(MaterialApp(
    debugShowCheckedModeBanner: false,
    home: MyApp(),
  ));
}

class Task {
  String title;
  bool isCompleted;
  DateTime? dateTime;

  Task({required this.title, this.isCompleted = false, this.dateTime});
}

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  List<Task> tasks = [];
  List<Task> completedTasks = [];

  final TextEditingController _controller = TextEditingController();
  DateTime? _selectedDateTime;

  // Keys para AnimatedList
  final GlobalKey<AnimatedListState> _pendingListKey = GlobalKey<AnimatedListState>();
  final GlobalKey<AnimatedListState> _completedListKey = GlobalKey<AnimatedListState>();

  void _addTask(String taskTitle) {
    final newTask = Task(title: taskTitle, dateTime: _selectedDateTime);
    setState(() {
      tasks.insert(0, newTask);
      _controller.clear();
      _selectedDateTime = null;
    });
    _pendingListKey.currentState?.insertItem(0);
  }

  void _markTaskAsCompleted(int index) {
    final task = tasks[index];
    setState(() {
      tasks.removeAt(index);
      _pendingListKey.currentState?.removeItem(
        index,
        (context, animation) => _buildTaskItem(task, animation, false),
      );
      task.isCompleted = true;
      completedTasks.insert(0, task);
      _completedListKey.currentState?.insertItem(0);
    });
  }

  void _removePendingTask(int index) {
    final removedTask = tasks[index];
    setState(() {
      tasks.removeAt(index);
      _pendingListKey.currentState?.removeItem(
        index,
        (context, animation) => _buildTaskItem(removedTask, animation, false),
      );
    });
  }

  void _removeCompletedTask(int index) {
    final removedTask = completedTasks[index];
    setState(() {
      completedTasks.removeAt(index);
      _completedListKey.currentState?.removeItem(
        index,
        (context, animation) => _buildTaskItem(removedTask, animation, true),
      );
    });
  }

  void _clearAllCompletedTasks() {
    showDialog(
      context: context,
      builder: (ctx) => AlertDialog(
        title: Text('Limpar tarefas concluídas'),
        content: Text('Tem certeza que deseja excluir todas as tarefas concluídas?'),
        actions: [
          TextButton(
            child: Text('Cancelar'),
            onPressed: () => Navigator.of(ctx).pop(),
          ),
          TextButton(
            child: Text('Confirmar'),
            onPressed: () {
              // Removendo com animação um a um
              for (int i = completedTasks.length - 1; i >= 0; i--) {
                _completedListKey.currentState?.removeItem(
                  i,
                  (context, animation) => _buildTaskItem(completedTasks[i], animation, true),
                );
              }
              completedTasks.clear();
              Navigator.of(ctx).pop();
            },
          ),
        ],
      ),
    );
  }

  Future<void> _selectDateTime(BuildContext context) async {
    try {
      final DateTime? pickedDate = await showDatePicker(
        context: context,
        initialDate: DateTime.now(),
        firstDate: DateTime(2020),
        lastDate: DateTime(2100),
      );

      if (pickedDate != null) {
        final TimeOfDay? pickedTime = await showTimePicker(
          context: context,
          initialTime: TimeOfDay.now(),
        );

        if (pickedTime != null) {
          final DateTime combined = DateTime(
            pickedDate.year,
            pickedDate.month,
            pickedDate.day,
            pickedTime.hour,
            pickedTime.minute,
          );

          setState(() {
            _selectedDateTime = combined;
          });
        }
      }
    } catch (e) {
      print('Erro ao selecionar data/hora: $e');
    }
  }

  String _formatDateTime(DateTime dateTime) {
    return '${dateTime.day.toString().padLeft(2, '0')}/'
        '${dateTime.month.toString().padLeft(2, '0')}/'
        '${dateTime.year} '
        '${dateTime.hour.toString().padLeft(2, '0')}:'
        '${dateTime.minute.toString().padLeft(2, '0')}';
  }

  Widget _buildTaskItem(Task task, Animation<double> animation, bool isCompletedList) {
    return SizeTransition(
      sizeFactor: animation,
      child: Card(
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(10),
        ),
        elevation: isCompletedList ? 2 : 3,
        margin: EdgeInsets.symmetric(vertical: 6),
        color: isCompletedList ? Colors.grey[200] : null,
        child: ListTile(
          title: Text(
            task.title,
            style: TextStyle(
              decoration: isCompletedList ? TextDecoration.lineThrough : TextDecoration.none,
              color: isCompletedList ? Colors.grey[600] : null,
            ),
          ),
          subtitle: task.dateTime != null
              ? Text('${isCompletedList ? 'Concluída:' : 'Para:'} ${_formatDateTime(task.dateTime!)}')
              : null,
          trailing: isCompletedList
              ? IconButton(
                  icon: Icon(Icons.delete_outline, color: Colors.red),
                  tooltip: 'Excluir tarefa',
                  onPressed: () {
                    final index = completedTasks.indexOf(task);
                    if (index != -1) _removeCompletedTask(index);
                  },
                )
              : Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    IconButton(
                      icon: Icon(Icons.check_circle, color: Colors.green),
                      tooltip: 'Marcar como concluída',
                      onPressed: () {
                        final index = tasks.indexOf(task);
                        if (index != -1) _markTaskAsCompleted(index);
                      },
                    ),
                    IconButton(
                      icon: Icon(Icons.delete, color: Colors.red),
                      tooltip: 'Excluir',
                      onPressed: () {
                        final index = tasks.indexOf(task);
                        if (index != -1) _removePendingTask(index);
                      },
                    ),
                  ],
                ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Agenda de Tarefas'),
        actions: [
          if (completedTasks.isNotEmpty)
            IconButton(
              icon: Icon(Icons.delete_sweep),
              tooltip: 'Limpar todas as concluídas',
              onPressed: _clearAllCompletedTasks,
            ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            // Campo de texto + botões
            Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: _controller,
                    decoration: InputDecoration(
                      labelText: 'Nova tarefa',
                      border: OutlineInputBorder(),
                    ),
                  ),
                ),
                SizedBox(width: 8),
                IconButton(
                  icon: Icon(Icons.calendar_today),
                  tooltip: 'Selecionar data e hora',
                  onPressed: () => _selectDateTime(context),
                ),
                IconButton(
                  icon: Icon(Icons.add),
                  tooltip: 'Adicionar tarefa',
                  onPressed: () {
                    if (_controller.text.trim().isNotEmpty) {
                      _addTask(_controller.text.trim());
                    }
                  },
                ),
              ],
            ),
            if (_selectedDateTime != null)
              Padding(
                padding: const EdgeInsets.only(top: 8.0),
                child: Text(
                  'Data selecionada: ${_formatDateTime(_selectedDateTime!)}',
                  style: TextStyle(color: Colors.blueGrey),
                ),
              ),
            SizedBox(height: 20),

            // Lista de tarefas pendentes animada
            Expanded(
              child: AnimatedList(
                key: _pendingListKey,
                initialItemCount: tasks.length,
                itemBuilder: (context, index, animation) {
                  final task = tasks[index];
                  return _buildTaskItem(task, animation, false);
                },
              ),
            ),

            SizedBox(height: 20),
            Text(
              'Tarefas Concluídas',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),

            // Lista de tarefas concluídas animada
            Expanded(
              child: AnimatedList(
                key: _completedListKey,
                initialItemCount: completedTasks.length,
                itemBuilder: (context, index, animation) {
                  final task = completedTasks[index];
                  return _buildTaskItem(task, animation, true);
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}
